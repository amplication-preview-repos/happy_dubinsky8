/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AlternativeRouteService } from "../alternativeRoute.service";
import { AlternativeRouteCreateInput } from "./AlternativeRouteCreateInput";
import { AlternativeRoute } from "./AlternativeRoute";
import { AlternativeRouteFindManyArgs } from "./AlternativeRouteFindManyArgs";
import { AlternativeRouteWhereUniqueInput } from "./AlternativeRouteWhereUniqueInput";
import { AlternativeRouteUpdateInput } from "./AlternativeRouteUpdateInput";

export class AlternativeRouteControllerBase {
  constructor(protected readonly service: AlternativeRouteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AlternativeRoute })
  async createAlternativeRoute(
    @common.Body() data: AlternativeRouteCreateInput
  ): Promise<AlternativeRoute> {
    return await this.service.createAlternativeRoute({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AlternativeRoute] })
  @ApiNestedQuery(AlternativeRouteFindManyArgs)
  async alternativeRoutes(
    @common.Req() request: Request
  ): Promise<AlternativeRoute[]> {
    const args = plainToClass(AlternativeRouteFindManyArgs, request.query);
    return this.service.alternativeRoutes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AlternativeRoute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async alternativeRoute(
    @common.Param() params: AlternativeRouteWhereUniqueInput
  ): Promise<AlternativeRoute | null> {
    const result = await this.service.alternativeRoute({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AlternativeRoute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAlternativeRoute(
    @common.Param() params: AlternativeRouteWhereUniqueInput,
    @common.Body() data: AlternativeRouteUpdateInput
  ): Promise<AlternativeRoute | null> {
    try {
      return await this.service.updateAlternativeRoute({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AlternativeRoute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAlternativeRoute(
    @common.Param() params: AlternativeRouteWhereUniqueInput
  ): Promise<AlternativeRoute | null> {
    try {
      return await this.service.deleteAlternativeRoute({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
