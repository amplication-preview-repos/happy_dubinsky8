/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AlternativeRoute as PrismaAlternativeRoute,
} from "@prisma/client";

export class AlternativeRouteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AlternativeRouteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.alternativeRoute.count(args);
  }

  async alternativeRoutes(
    args: Prisma.AlternativeRouteFindManyArgs
  ): Promise<PrismaAlternativeRoute[]> {
    return this.prisma.alternativeRoute.findMany(args);
  }
  async alternativeRoute(
    args: Prisma.AlternativeRouteFindUniqueArgs
  ): Promise<PrismaAlternativeRoute | null> {
    return this.prisma.alternativeRoute.findUnique(args);
  }
  async createAlternativeRoute(
    args: Prisma.AlternativeRouteCreateArgs
  ): Promise<PrismaAlternativeRoute> {
    return this.prisma.alternativeRoute.create(args);
  }
  async updateAlternativeRoute(
    args: Prisma.AlternativeRouteUpdateArgs
  ): Promise<PrismaAlternativeRoute> {
    return this.prisma.alternativeRoute.update(args);
  }
  async deleteAlternativeRoute(
    args: Prisma.AlternativeRouteDeleteArgs
  ): Promise<PrismaAlternativeRoute> {
    return this.prisma.alternativeRoute.delete(args);
  }
}
