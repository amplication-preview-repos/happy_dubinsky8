/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CareerService } from "../career.service";
import { CareerCreateInput } from "./CareerCreateInput";
import { Career } from "./Career";
import { CareerFindManyArgs } from "./CareerFindManyArgs";
import { CareerWhereUniqueInput } from "./CareerWhereUniqueInput";
import { CareerUpdateInput } from "./CareerUpdateInput";

export class CareerControllerBase {
  constructor(protected readonly service: CareerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Career })
  async createCareer(@common.Body() data: CareerCreateInput): Promise<Career> {
    return await this.service.createCareer({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Career] })
  @ApiNestedQuery(CareerFindManyArgs)
  async careers(@common.Req() request: Request): Promise<Career[]> {
    const args = plainToClass(CareerFindManyArgs, request.query);
    return this.service.careers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Career })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async career(
    @common.Param() params: CareerWhereUniqueInput
  ): Promise<Career | null> {
    const result = await this.service.career({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Career })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCareer(
    @common.Param() params: CareerWhereUniqueInput,
    @common.Body() data: CareerUpdateInput
  ): Promise<Career | null> {
    try {
      return await this.service.updateCareer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Career })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCareer(
    @common.Param() params: CareerWhereUniqueInput
  ): Promise<Career | null> {
    try {
      return await this.service.deleteCareer({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
