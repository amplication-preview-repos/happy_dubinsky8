/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Career } from "./Career";
import { CareerCountArgs } from "./CareerCountArgs";
import { CareerFindManyArgs } from "./CareerFindManyArgs";
import { CareerFindUniqueArgs } from "./CareerFindUniqueArgs";
import { DeleteCareerArgs } from "./DeleteCareerArgs";
import { CareerService } from "../career.service";
@graphql.Resolver(() => Career)
export class CareerResolverBase {
  constructor(protected readonly service: CareerService) {}

  async _careersMeta(
    @graphql.Args() args: CareerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Career])
  async careers(@graphql.Args() args: CareerFindManyArgs): Promise<Career[]> {
    return this.service.careers(args);
  }

  @graphql.Query(() => Career, { nullable: true })
  async career(
    @graphql.Args() args: CareerFindUniqueArgs
  ): Promise<Career | null> {
    const result = await this.service.career(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Career)
  async deleteCareer(
    @graphql.Args() args: DeleteCareerArgs
  ): Promise<Career | null> {
    try {
      return await this.service.deleteCareer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
